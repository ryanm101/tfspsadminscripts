<#
#  Powershell TFS Admin Scripts 
#  Copyright 2013 Ryan McLean
#  ryan1_00 _at_ *nospam* hotmail *dot* com
#  http://ninet.org
#>


$arrAssemblies = @(
    "Microsoft.TeamFoundation.Client",
    "Microsoft.TeamFoundation.Server",
    "Microsoft.TeamFoundation.Common",
    "Microsoft.TeamFoundation.Build.Client",
    "Microsoft.TeamFoundation.Build.Workflow",
    "Microsoft.TeamFoundation.Framework.Client",
    "Microsoft.TeamFoundation.VersionControl.Client"
)
Foreach ($assembly in $arrAssemblies) {
    [void][Reflection.Assembly]::LoadWithPartialName($assembly)
}	
Remove-Variable assembly, arrAssemblies

$typ_BuildStatus        = [Microsoft.TeamFoundation.Build.Client.BuildStatus]
$typ_QueryOptions       = [Microsoft.TeamFoundation.Build.Client.QueryOptions]


<#
.SYNOPSIS
  Generates a URI from server details
  
.DESCRIPTION
  Generates a URI from server details that can be passed into Get-TFSCollection in order to get the TeamProjectCollection Object.
    
.NOTES
  Author: Ryan McLean
  Website: http://ninet.org
  
.PARAMETER ServerName
  Mandatory - Name of the TFS Server to connect to

.PARAMETER Collection
  Optional - Collection to connect to
  
.PARAMETER Port
  Optional - Port number to use for connection
  
.PARAMETER VirtualDir
  Optional - IIS VirtualDir that contains the TFS collections.
  
.EXAMPLE
  PS> Get-TFSCollectionURI -ServerName tfssrv01
  
  Will Generate a URI using the defaults:
  http://tfssrv01:8080/TFS/DefaultCollection

.EXAMPLE
  PS> Get-TFSCollectionURI -ServerName tfssrv01 -Collection Col1, -Port 80 -VirtualDir tf
  
  Will generate the following URI:
  http://tfssrv01:80/tf/Col1
  
#>
Function Get-TFSCollectionURI {
    [CmdletBinding()]
    Param(
        [Parameter(Position=0, 
			Mandatory=$true)][String]$ServerName,
        [Parameter(Position=1, 
			Mandatory=$false)][String]$Collection = "DefaultCollection",
        [Parameter(Position=2, 
			Mandatory=$false)][int]$Port = 8080,   
        [Parameter(Position=3, 
			Mandatory=$false)][String]$VirtualDir = "TFS"
        )
    Process {
        [Uri]$TFSCollectionURI = "http://" + $ServerName + ":" + $Port + "/" + $VirtualDir + "/" + $Collection
        $TFSCollectionURI
    }
}

<#
.SYNOPSIS
  Using the TFS server URI returns the Team Project Collection.
  
.DESCRIPTION
  The URI generated by this function can be passed to other TFSAdminFunctions as the -TeamProjectCollection parameter negating the need to pass in the paramater TFSServer
  
.NOTES
  Author: Ryan McLean
  Website: http://ninet.org
  
.PARAMETER TFSCollectionURI
  Mandatory URI pointing the to TFS server and Collection to use.

.EXAMPLE
  PS> Get-TFSCollection -TFSCollectionURI "http://tfssrv01:80/tf/Col1"
#>
Function Get-TFSCollection {
    [CmdLetBinding()]
    param(
        [Parameter(Position=0,Mandatory=$true)][Uri]$TFSCollectionURI
    )
       Begin {
        $typ_TfsTeamProjectCollectionFactory = [Microsoft.TeamFoundation.Client.TfsTeamProjectCollectionFactory]
    }
    Process {
        $typ_TfsTeamProjectCollectionFactory::GetTeamProjectCollection($TFSCollectionURI)
    }
}

<#
.SYNOPSIS
  Returns Interface Objects
  
.DESCRIPTION
  Returns Interface Objects that are used to access the TFS API
  
.NOTES
  Author: Ryan McLean
  Website: http://ninet.org
  
.PARAMETER TFSProjectCollection
  Mandatory 

.PARAMETER Build
  (Default) Optional
  
.PARAMETER VersionControl
  Optional
  
.PARAMETER LinkGenerator
  Optional
  
.PARAMETER IdentityManagement
  Optional
  
.PARAMETER Security
  Optional
  
.PARAMETER CommonStructureService
  Optional
  
.PARAMETER Custom
  Optional
  
.EXAMPLE
  PS> Get-TFSService -TFSProjectCollection (Get-TFSCollection -TFSCollectionURI "http://tfssrv01:80/tf/Col1")
  
.EXAMPLE
  PS> Get-TFSService -TFSProjectCollection (Get-TFSCollection -TFSCollectionURI "http://tfssrv01:80/tf/Col1") -VersionControl
  
.EXAMPLE
  PS> Get-TFSService -TFSProjectCollection (Get-TFSCollection -TFSCollectionURI "http://tfssrv01:80/tf/Col1") -Custom ([Microsoft.TeamFoundation.Framework.Client.ISecurityService])
#>
Function Get-TFSService {
    [CmdletBinding(DefaultParameterSetName="BuildService")]
    Param(
        [Parameter(Position=0,ValueFromPipeline=$true,Mandatory=$true)][alias("TPC")][Microsoft.TeamFoundation.Client.TfsTeamProjectCollection]$TFSProjectCollection,
        [parameter(mandatory=$false,parametersetname="BuildService")][Switch]$Build,     
        [parameter(mandatory=$false,parametersetname="VersionControlService")][Switch]$VersionControl,
        [parameter(mandatory=$false,parametersetname="Linking")][Switch]$LinkGenerator,
        [parameter(mandatory=$false,parametersetname="IdentityMgmtService")][Switch]$IdentityManagement,
        [parameter(mandatory=$false,parametersetname="SecurityService")][Switch]$Security,
        [parameter(mandatory=$false,parametersetname="CommonStructureService")][Switch]$CommonStructureService,
        [parameter(mandatory=$false,parametersetname="Custom")][object]$Custom
        
    )
    Begin {
        $typ_VersionControlServer = [Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer]
        $typ_IBuildServer = [Microsoft.TeamFoundation.Build.Client.IBuildServer]
        $typ_ILinking = [Microsoft.TeamFoundation.ILinking]
        $typ_IIdentityManagementService = [Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService]
        $typ_ISecurityService = [Microsoft.TeamFoundation.Framework.Client.ISecurityService]
        $typ_ICommonStructureService = [Microsoft.TeamFoundation.Server.ICommonStructureService]
        $psn = $PsCmdlet.ParameterSetName
    }
    Process {
        Switch ($psn) {
            "BuildService" {
                $Service = $TFSProjectCollection.GetService($typ_IBuildServer)
            }
            "VersionControlService" {
                $Service = $TFSProjectCollection.GetService($typ_VersionControlServer)
            }
            "Linking" {
                $Service = $TFSProjectCollection.GetService($typ_ILinking)
            }
            "IdentityMgmtService" {
                $Service = $TFSProjectCollection.GetService($typ_IIdentityManagementService)
            }
            "SecurityService" {
                $Service = $TFSProjectCollection.GetService($typ_ISecurityService)
            }
            "CommonStructureService" {
                $Service = $TFSProjectCollection.GetService($typ_ICommonStructureService)
            }
            "Custom" {
                $Service = $TFSProjectCollection.GetService($Custom)
            }
        }
        $Service
    }
}

<#
.SYNOPSIS
  Synopsis
  
.DESCRIPTION
  Description
  
.NOTES
  Author: Ryan McLean
  Website: http://ninet.org
  
.PARAMETER Param
  Mandatory 

.EXAMPLE
  PS> Get-TFSCollection -TFSCollectionURI "http://tfssrv01:80/tf/Col1"
#>
Function Get-TFSProjects {
    [CmdLetBinding(DefaultParameterSetName="Server")]
    Param (
        [Parameter(Position=0,ParameterSetName="Server",Mandatory=$true)]
        [Parameter(Position=99,ParameterSetName="Collection",Mandatory=$false)]
        [Uri]$TFSCollectionURI,
        [Parameter(Position=0,ParameterSetName="Collection")][alias("TPC")]
        [Microsoft.TeamFoundation.Client.TfsTeamProjectCollection]$TFSProjectCollection
    )
    Begin {
        Switch ($PsCmdlet.ParameterSetName) {
            "Server" {
                $CommonStructureService = Get-TFSService -TFSProjectCollection (Get-TFSCollection -TFSServer $TFSCollectionURI) -CommonStructureService
            }
            "Collection" {
                $CommonStructureService = Get-TFSService -TFSProjectCollection $TFSProjectCollection -CommonStructureService
            }
        }
    }
    Process {
        $ProjectList = $CommonStructureService.ListAllProjects()
        $ProjectList
    }        
}

<#
.SYNOPSIS
  List all running builds and the agent they are on in a collection
  
.DESCRIPTION
  Description
  
.NOTES
  Author: Ryan McLean
  Website: http://ninet.org
  
.PARAMETER TFSCollectionURI
  Mandatory/Optional - Mandatory if not TFSProjectCollection object is passed into -TFSProjectCollection
  
.PARAMETER TFSProjectCollection
  Optional/Mandatory Only required if not TFSCollectionURI is specified
  
.PARAMETER Projects
  Optional comma serperated list of Projects to check for builds in progress, if none specified then 

.EXAMPLE
  PS> Get-TFSBuildsInProgress -TFSCollectionURI "http://tfssrv01:80/tf/Col1"

.EXAMPLE
  PS> Get-TFSBuildsInProgress -TFSCollectionURI "http://tfssrv01:80/tf/Col1" -Projects xxx
  
.EXAMPLE
  PS> Get-TFSBuildsInProgress -TFSProjectCollection $TPC
  
.EXAMPLE
  PS> Get-TFSBuildsInProgress -TFSProjectCollection $TPC -Projects xxx
#>
Function Get-TFSBuildsInProgress {
    [CmdLetBinding(DefaultParameterSetName="Server")]
    Param (
        [Parameter(Position=0,ParameterSetName="Server",Mandatory=$true)]
        [Parameter(Position=99,ParameterSetName="Collection",Mandatory=$false)]
        [Uri]$TFSCollectionURI,
        [Parameter(Position=0,ParameterSetName="Collection")][alias("TPC")]
        [Microsoft.TeamFoundation.Client.TfsTeamProjectCollection]$TFSProjectCollection,
        [Parameter(Position=1,Mandatory=$false)][String]$Projects
    )
    Begin {
        Switch ($PsCmdlet.ParameterSetName) {
            "Server" {
                $TFSProjectCollection = Get-TFSCollection -TFSCollectionURI $TFSCollectionURI
            }
        }
        $BuildService = Get-TFSService -TFSProjectCollection $TFSProjectCollection -Build
        
        $ProjectList = @()
        if ($Projects) {
            $Projects.Split(",") | % {
                $ProjectList += $_
            }
        } else {
            Get-TFSProjects -TFSProjectCollection $TFSProjectCollection | % { 
                $ProjectList += $_.Name
            }
        }      
    }
    Process {
        $arrAgentsInUse = @()
        $ProjectList | % {
            $spec = $BuildService.CreateBuildDetailSpec($_)
            $spec.Status = ($typ_BuildStatus::InProgress).value__
            $spec.QueryOptions = (($typ_QueryOptions::Definitions).value__ + ($typ_QueryOptions::Controllers).value__ + ($typ_QueryOptions::Agents).value__)

            ($BuildService.QueryBuilds($spec)).Builds | % {
                $RunningBuild = "" | Select Project, BuildDefinition, BuildAgent
                
                $RunningBuild.Project = $_.TeamProject
                $BuildDetail = $BuildService.GetBuild($_.Uri)
                $RunningBuild.BuildDefinition = ($BuildService.GetBuildDefinition($BuildDetail.BuildDefinitionUri)).Name
                $BuildAgents = $BuildDetail.BuildController.Agents
                $AgentName = ""
                $i = 0
                $found = $false
                do {
                	if ([Uri]::Equals($BuildAgents[$i].ReservedForBuild, $BuildDetail.Uri)){
                		$RunningBuild.BuildAgent = $BuildAgents[$i].MachineName
                        $found = $true
                	}
                    $i++
                } until (($found) -or ($i -eq $BuildAgents.Count))
                if ($found) {
                    $arrAgentsInUse += $RunningBuild
                }
            }
        }
        $arrAgentsInUse
    }    
}

<#
.SYNOPSIS
  List all running builds and the agent they are on in a collection
  
.DESCRIPTION
  Description
  
.NOTES
  Author: Ryan McLean
  Website: http://ninet.org
  
.PARAMETER TFSCollectionURI
  Mandatory/Optional - Mandatory if not TFSProjectCollection object is passed into -TFSProjectCollection
  
.PARAMETER TFSProjectCollection
  Optional/Mandatory Only required if not TFSCollectionURI is specified
  
.PARAMETER Project
  Mandatory Project that the build definition resides in.
  
.PARAMETER Definition
  Mandatory Build Definition to build

.EXAMPLE
  PS> Queue-TFSBuild -TFSCollectionURI "http://tfssrv01:80/tf/Col1" -Project proj1 -Definition Proj1Daily
  
.EXAMPLE
  PS> Queue-TFSBuild -TFSProjectCollection $TPC -Project proj1 -Definition Proj1Daily

#>
Function Queue-TFSBuild {
    [CmdLetBinding(DefaultParameterSetName="Server")]
    Param (
        [Parameter(Position=0,ParameterSetName="Server",Mandatory=$true)]
        [Parameter(Position=99,ParameterSetName="Collection",Mandatory=$false)]
        [Uri]$TFSCollectionURI,
        [Parameter(Position=0,ParameterSetName="Collection")][alias("TPC")]
        [Microsoft.TeamFoundation.Client.TfsTeamProjectCollection]$TFSProjectCollection,
        [Parameter(Position=1,Mandatory=$true)][String]$Project,
        [Parameter(Position=2,Mandatory=$true)][String]$Definition
    )
    Begin {
        Switch ($PsCmdlet.ParameterSetName) {
            "Server" {
                $TFSProjectCollection = Get-TFSCollection -TFSServer $TFSCollectionURI
            }
        }
    }
    Process {
        [Microsoft.TeamFoundation.Build.Client.IBuildServer] $buildserver = Get-TFSService -TFSProjectCollection $TFSProjectCollection -Build
        [Microsoft.TeamFoundation.Build.Client.IBuildDefinition] $BuildDef = $buildserver.GetBuildDefinition($Project,$Definition)
        [Microsoft.TeamFoundation.Build.Client.IBuildRequest] $BuildReq = $BuildDef.CreateBuildRequest();
        $buildserver.QueueBuild($BuildReq)
    }
}

<#
.SYNOPSIS
  Synopsis
  
.DESCRIPTION
  Description
  
.NOTES
  Author: Ryan McLean
  Website: http://ninet.org
  
.PARAMETER Param
  Mandatory 

.EXAMPLE
  PS> Get-TFSCollection -TFSCollectionURI "http://tfssrv01:80/tf/Col1"
#>
Function Get-TFSWorkspace {
    [CmdLetBinding(DefaultParameterSetName="Server")]
    Param (
        [Parameter(Position=0,ParameterSetName="Server",Mandatory=$true)]
        [Parameter(Position=99,ParameterSetName="Collection",Mandatory=$false)]
        [Parameter(Position=99,ParameterSetName="VersionControl",Mandatory=$false)]
        [Uri]$TFSCollectionURI,
        [Parameter(Position=0,ParameterSetName="Collection")]
        [alias("TPC")][Microsoft.TeamFoundation.Client.TfsTeamProjectCollection]$TFSProjectCollection,
        [Parameter(Position=0,ParameterSetName="VersionControl")]
        [alias("VCS")][Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer]$VersionControlServer,
        [Parameter(Position=1,Mandatory=$false)][String]$machinename = [Environment]::MachineName,
        [Parameter(Position=2,Mandatory=$false)][String]$username = [Environment]::UserDomainName + "\" + [Environment]::UserName
    )
    Begin {
        Switch ($PsCmdlet.ParameterSetName) {
            "Server" {
                $VersionControlServer = Get-TFSService -TFSProjectCollection (Get-TFSCollection -TFSServer $TFSCollectionURI) -VersionControl
            }
            "Collection" {
                $VersionControlServer = Get-TFSService -TFSProjectCollection $TFSProjectCollection -VersionControl
            }
        }
    }
    Process {
        [Microsoft.TeamFoundation.VersionControl.Client.Workspace] $WorkSpace = $VersionControlServer.GetWorkspace($machinename, $username)
        $WorkSpace
    }
}

<#
.SYNOPSIS
  Synopsis
  
.DESCRIPTION
  Description
  
.NOTES
  Author: Ryan McLean
  Website: http://ninet.org
  
.PARAMETER Param
  Mandatory 

.EXAMPLE
  PS> Get-TFSCollection -TFSCollectionURI "http://tfssrv01:80/tf/Col1"
#>
Function Get-TFSPendingChanges {
    [CmdLetBinding(DefaultParameterSetName="Server")]
    Param (
        [Parameter(Position=0,ParameterSetName="Server",Mandatory=$true)]
        [Parameter(Position=99,ParameterSetName="Collection",Mandatory=$false)]
        [Parameter(Position=99,ParameterSetName="VersionControl",Mandatory=$false)]
        [Parameter(Position=99,ParameterSetName="WorkSpace",Mandatory=$false)]
        [Uri]$TFSCollectionURI,
        [Parameter(Position=0,ParameterSetName="Collection")]
        [alias("TPC")][Microsoft.TeamFoundation.Client.TfsTeamProjectCollection]$TFSProjectCollection,
        [Parameter(Position=0,ParameterSetName="VersionControl")]
        [alias("VCS")][Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer]$VersionControlServer,
        [Parameter(Position=0,ParameterSetName="WorkSpace")]
        [alias("WKS")][Microsoft.TeamFoundation.VersionControl.Client.Workspace]$WorkSpace,
        [Parameter(Position=1,Mandatory=$false)][String]$Project,
        [Parameter(Position=2,Mandatory=$false)][String]$Path,
        [Parameter(Position=3,Mandatory=$false)][String]$machinename = [Environment]::MachineName,
        [Parameter(Position=4,Mandatory=$false)][String]$username = [Environment]::UserDomainName + "\" + [Environment]::UserName
    )
    Begin {
        Switch ($PsCmdlet.ParameterSetName) {
            "Server" {
                $WorkSpace = Get-TFSWorkspace -TFSServer $TFSCollectionURI -username $username -machinename $machinename
            }
            "Collection" {
                $WorkSpace = Get-TFSWorkspace -TFSProjectCollection $TFSProjectCollection -username $username -machinename $machinename
            }
            "VersionControl" {
                $WorkSpace = Get-TFSWorkspace -VersionControlServer $VersionControlServer -username $username -machinename $machinename
            } 
        }
        $localpath = "`$\" + $Project + $Path
        $eRecursionType = [Microsoft.TeamFoundation.VersionControl.Client.RecursionType]
    }
    Process {
        $WorkSpace.GetPendingChanges($localpath, ($eRecursionType::Full).Value__, $false)
    }
}

<#
.SYNOPSIS
  Synopsis
  
.DESCRIPTION
  Description
  
.NOTES
  Author: Ryan McLean
  Website: http://ninet.org
  
.PARAMETER Param
  Mandatory 

.EXAMPLE
  PS> Get-TFSCollection -TFSCollectionURI "http://tfssrv01:80/tf/Col1"
#>
Function Undo-TFSPendingChange {
    [CmdLetBinding(DefaultParameterSetName="Server")]
    Param (
        [Parameter(Position=0,ParameterSetName="Server",Mandatory=$true)]
        [Parameter(Position=99,ParameterSetName="Collection",Mandatory=$false)]
        [Parameter(Position=99,ParameterSetName="VersionControl",Mandatory=$false)]
        [Uri]$TFSCollectionURI,
        [Parameter(Position=0,ParameterSetName="Collection")]
        [alias("TPC")][Microsoft.TeamFoundation.Client.TfsTeamProjectCollection]$TFSProjectCollection,
        [Parameter(Position=0,ParameterSetName="VersionControl")]
        [alias("VCS")][Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer]$VersionControlServer,
        [Parameter(Position=0,ParameterSetName="WorkSpace")]
        [alias("WKS")][Microsoft.TeamFoundation.VersionControl.Client.Workspace]$WorkSpace,
        [Parameter(Position=1,Mandatory=$true)][Microsoft.TeamFoundation.VersionControl.Client.PendingChange[]]$Change,
        [Parameter(Position=3,Mandatory=$false)][String]$machinename = [Environment]::MachineName,
        [Parameter(Position=4,Mandatory=$false)][String]$username = [Environment]::UserDomainName + "\" + [Environment]::UserName
    )
    Begin {
        Switch ($PsCmdlet.ParameterSetName) {
            "Server" {
                $WorkSpace = Get-TFSWorkspace -TFSServer $TFSCollectionURI -username $username -machinename $machinename
            }
            "Collection" {
                $WorkSpace = Get-TFSWorkspace -TFSProjectCollection $TFSProjectCollection -username $username -machinename $machinename
            }
            "VersionControl" {
                $WorkSpace = Get-TFSWorkspace -VersionControlServer $VersionControlServer -username $username -machinename $machinename
            } 
        }
    }
    Process {
        $WorkSpace.Undo($Change)
    }
}

<#
.SYNOPSIS
  Synopsis
  
.DESCRIPTION
  Description
  
.NOTES
  Author: Ryan McLean
  Website: http://ninet.org
  
.PARAMETER Param
  Mandatory 

.EXAMPLE
  PS> Get-TFSCollection -TFSCollectionURI "http://tfssrv01:80/tf/Col1"
#>
Function Get-TFSMergeCandidates {
    [CmdLetBinding(DefaultParameterSetName="Server")]
    Param (
        [Parameter(Position=0,ParameterSetName="Server",Mandatory=$true)]
        [Parameter(Position=99,ParameterSetName="Collection",Mandatory=$false)]
        [Parameter(Position=99,ParameterSetName="VersionControl",Mandatory=$false)]
        [Uri]$TFSCollectionURI,
        [Parameter(Position=0,ParameterSetName="Collection")]
        [alias("TPC")][Microsoft.TeamFoundation.Client.TfsTeamProjectCollection]$TFSProjectCollection,
        [Parameter(Position=0,ParameterSetName="VersionControl")]
        [alias("VCS")][Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer]$VersionControlServer,
        [Parameter(Position=1,Mandatory=$true)][String]$SourcePath,
        [Parameter(Position=2,Mandatory=$true)][String]$TargetPath,
        [Parameter(Position=3,Mandatory=$false)][String]$machinename = [Environment]::MachineName,
        [Parameter(Position=4,Mandatory=$false)][String]$username = [Environment]::UserDomainName + "\" + [Environment]::UserName
    )
    Begin {
        Switch ($PsCmdlet.ParameterSetName) {
            "Server" {
                $VersionControlServer = Get-TFSService -TFSProjectCollection (Get-TFSCollection -TFSServer $TFSCollectionURI) -VersionControl
            }
            "Collection" {
                $VersionControlServer = Get-TFSService -TFSProjectCollection $TFSProjectCollection -VersionControl
            }
        }
        $eRecursionType = [Microsoft.TeamFoundation.VersionControl.Client.RecursionType]
    }
    Process {
        $VersionControlServer.GetMergeCandidates($SourcePath, $TargetPath, ($eRecursionType::Full).Value__)
    }
}

<#
.SYNOPSIS
  Synopsis
  
.DESCRIPTION
  Description
  
.NOTES
  Author: Ryan McLean
  Website: http://ninet.org
  
.PARAMETER Param
  Mandatory 

.EXAMPLE
  PS> Get-TFSCollection -TFSCollectionURI "http://tfssrv01:80/tf/Col1"
#>
Function Merge-TFSMergeCandidates {
    [CmdLetBinding(DefaultParameterSetName="Server")]
    Param (
        [Parameter(Position=0,ParameterSetName="Server",Mandatory=$true)]
        [Parameter(Position=99,ParameterSetName="Collection",Mandatory=$false)]
        [Parameter(Position=99,ParameterSetName="VersionControl",Mandatory=$false)]
        [Uri]$TFSCollectionURI,
        [Parameter(Position=0,ParameterSetName="Collection")]
        [alias("TPC")][Microsoft.TeamFoundation.Client.TfsTeamProjectCollection]$TFSProjectCollection,
        [Parameter(Position=0,ParameterSetName="VersionControl")]
        [alias("VCS")][Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer]$VersionControlServer,
        [Parameter(Position=0,ParameterSetName="WorkSpace")]
        [alias("WKS")][Microsoft.TeamFoundation.VersionControl.Client.Workspace]$WorkSpace,
        [Parameter(Position=1,Mandatory=$true)][String]$SourcePath,
        [Parameter(Position=2,Mandatory=$true)][String]$TargetPath,
        [Parameter(Position=3,Mandatory=$true)]
        [ValidateSet('Checkin','CheckOut','None','Unchanged')]
        [String]$lock,
        [Parameter(Position=4,Mandatory=$true)]
        [ValidateSet('AlwaysAcceptMine','Baseless','Conservative','ForceMerge','NoAutoResolve','NoImplicitBaseless','NoMerge','None','Silent')]
        [String]$Preview,
        [Parameter(Position=5,Mandatory=$false)][String]$machinename = [Environment]::MachineName,
        [Parameter(Position=6,Mandatory=$false)][String]$username = [Environment]::UserDomainName + "\" + [Environment]::UserName
    )
    Begin {
        Switch ($PsCmdlet.ParameterSetName) {
            "Server" {
                $WorkSpace = Get-TFSWorkspace -TFSServer $TFSCollectionURI -username $username -machinename $machinename
            }
            "Collection" {
                $WorkSpace = Get-TFSWorkspace -TFSProjectCollection $TFSProjectCollection -username $username -machinename $machinename
            }
            "VersionControl" {
                $WorkSpace = Get-TFSWorkspace -VersionControlServer $VersionControlServer -username $username -machinename $machinename
            } 
        }
        $eLockLevel = [Microsoft.TeamFoundation.VersionControl.Client.LockLevel]
        $eMergeOptionsEx = [Microsoft.TeamFoundation.VersionControl.Common.MergeOptionsEx]
    }
    Process {
            $WorkSpace.Merge($SourcePath, $TargetPath, ($eLockLevel::$lock).Value__, ($eMergeOptionsEx::$Preview).Value__)
            #$WorkSpace.Merge($SourcePath, $TargetPath, $null, $null)
    }
}

